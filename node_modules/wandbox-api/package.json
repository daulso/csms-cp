{
  "_from": "wandbox-api",
  "_id": "wandbox-api@0.0.0",
  "_inBundle": false,
  "_integrity": "sha1-vakBMggkB8DPhxSRHQj2/b4pJh8=",
  "_location": "/wandbox-api",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "wandbox-api",
    "fetchSpec": "latest",
    "name": "wandbox-api",
    "raw": "wandbox-api",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/wandbox-api/-/wandbox-api-0.0.0.tgz",
  "_shasum": "bda90132082407c0cf8714911d08f6fdbe29261f",
  "_shrinkwrap": null,
  "_spec": "wandbox-api",
  "_where": "C:\\Users\\윤다울\\csms\\csms-cp",
  "author": {
    "email": "pburckhardt@outlook.com",
    "name": "Philipp Burckhardt"
  },
  "bin": {
    "runWandbox": "./bin/cli"
  },
  "bugs": {
    "url": "https://github.com/planeshifter/node-wandbox-api/issues"
  },
  "bundleDependencies": false,
  "contributors": [
    {
      "name": "Philipp Burckhardt",
      "email": "pburckhardt@outlook.com"
    }
  ],
  "dependencies": {
    "debug": "^2.2.0",
    "minimist": "^1.2.0",
    "request": "^2.69.0",
    "type-name": "^2.0.0",
    "update-notifier": "^0.6.0",
    "utils-copy": "^1.1.0",
    "utils-cwd": "^2.0.0",
    "utils-fs-read-file": "^1.0.0",
    "utils-merge2": "2.x.x",
    "validate.io-boolean-primitive": "^1.0.0",
    "validate.io-function": "^1.0.2",
    "validate.io-object": "^1.0.4",
    "validate.io-object-array": "^1.0.0",
    "validate.io-string-primitive": "^1.0.0"
  },
  "deprecated": false,
  "description": "Node.js bindings to the Wandbox API.",
  "devDependencies": {
    "@kgryte/noop": "^1.0.0",
    "chai": "3.x.x",
    "codecov": "1.x.x",
    "istanbul": "^0.4.1",
    "jshint": "2.x.x",
    "jshint-stylish": "2.x.x",
    "mkdirp": "^0.5.1",
    "proxyquire": "^1.7.4",
    "tap-spec": "4.x.x",
    "tape": "4.x.x",
    "utils-fs-exists": "^1.0.1"
  },
  "homepage": "https://github.com/planeshifter/node-wandbox-api#readme",
  "keywords": [
    "api",
    "compilation",
    "compiler",
    "social compiler",
    "wandbox"
  ],
  "license": "MIT",
  "main": "./lib",
  "name": "wandbox-api",
  "optionalDependencies": {},
  "readme": "Node Wandbox API\n===\n[![NPM version][npm-image]][npm-url] [![Build Status][build-image]][build-url] [![Coverage Status][coverage-image]][coverage-url] [![Dependencies][dependencies-image]][dependencies-url]\n\n> Access Social Compilation Service [Wandbox][wandbox] via API from Node.js.\n\n\n## Installation\n\n``` bash\n$ npm install wandbox-api\n```\n\n\n## Usage\n\n``` javascript\nvar runWandbox = require( 'wandbox-api' );\n```\n\n#### runWandbox( [dest,] src[, opts], clbk )\n\nCompile and run programs on [Wandbox][wandbox]. `src` has to be the path of the source file that Wandbox should compile. Results of API call are passed to `clbk`, a callback function which\nhas an `error` and `result` parameter, and optionally saved to the file specified in `dest`. To change the default compiler options, an options object can be supplied (`opts`).\n\n``` javascript\n/* FILE: code.cpp\n\t#include <iostream>\n\tint main() {\n\t\tstd::cout << \"All is well\" << std::endl;\n\t}\n*/\n\n// Pass results to callback function...\nrunWandbox( './code.cpp', clbk );\n\n// Save results to JSON file...\nrunWandbox( './output.json', '/code.cpp', clbk );\n\nfunction clbk( error, results ) {\n\tif ( error ) {\n\t\tthrow new Error( error.message );\n\t}\n\tvar out = results;\n\t/* OUTPUT:\n\t\t{\n\t\t\tprogram_message: 'All is well\\n',\n\t\t\tprogram_output: 'All is well\\n',\n\t\t\tstatus: '0'\n\t\t}\n\t*/\n}\n```\n\nPer Node.js convention, the callback function receives two arguments: `err` and `res`. `err` will be an `error` object in case the GET request is not successful and `null` otherwise,\nin which case `res` will hold the results from running the code on Wandbox. According to the [Wandbox API documentation][wandbox-api-docs], the result `object` might have the following key-value pairs:\n\n*\t__status__: Exit code\n*\t__signal__: Signal message\n*\t__compiler_output__: stdout at compiling\n*\t__compiler_error__:  stderr at compiling\n*\t__compiler_message__: merged messages compiler_output and compiler_error\n*\t__program_output__: stdout at runtime\n*\t__program_error__: stderr at runtime\n*\t__program_message__: merged messages program_output and program_error\n\nIf `save` option is set to true, the result in addition have the following key-value pairs:\n\n*\t__permlink__: permlink you can pass to GET /permlink/:link.\n*\t__url__ URL to display on browser.\n\n#### runWandbox.fromString( [dest,] code[, opts], clbk )\n\nDirectly compile and execute code in a source code `string`.\n\n```javascript\nrunWandbox.fromString( '#include <iostream>\\nint main() {\\n\\tstd::cout << \"All is well\" << std::endl;}', clbk );\n\nfunction clbk( error, results ) {\n\tif ( error ) {\n\t\tthrow new Error( error.message );\n\t}\n\tvar out = results;\n}\n```\n\nThe two exported `functions` accept the following `options`:\n*\t__compiler__: name of used compiler. Default: `'gcc-head'`.\n*\t__codes__: additional codes, objects with `file` and `code` keys. Default: `[]`.\n*\t__options__: used options for a compiler joined by comma. Default: `''`.\n*\t__stdin__: standard input. Default: `''`.\n*\t__compiler-option-raw__: additional compile-time options joined by line-break. Default: `''`.\n*\t__runtime-option-raw__: additional run-time options joined by line-break. Default: `''`.\n*\t__save__: boolean indicating whether permanent link should be generated. Default: `false`.\n\nTo specify which compiler to use, set the `compiler` option.\n\n```javascript\nvar code = 'print(\"I can also run Python.\")';\n\nrunWandbox.fromString( code, { 'compiler': 'python-3.5.0' }, function clbk( errror, results ) {\n\tvar out = results;\n\t/*\n\t\t{\n\t\t\tprogram_message: 'I can also run Python.\\n',\n\t\t\tprogram_output: 'I can also run Python.\\n',\n\t\t\tstatus: '0'\n\t\t}\n\t*/\n});\n```\n\nTo specify compile options, supply a comma-separated list to `options`.\n\n```javascript\nvar code = '#include <iostream>\\r\\n int main() { int x = 0; std::cout << \"hoge\" << std::endl; }';\n\nrunWandbox.fromString( code, { 'options': 'warning,gnu++1y' }, function clbk( error, results ) {\n\tvar out = res;\n\t/*\n\t\t{ compiler_error: 'prog.cc: In function \\'int main()\\':\\nprog.cc:2:19: warning: unused variable \\'x\\' [-Wunused-variable]\\n  int main() { int x = 0; std::cout << \"hoge\" << std::endl; }\\n                   ^\\n',\n\t\t  compiler_message: 'prog.cc: In function \\'int main()\\':\\nprog.cc:2:19: warning: unused variable \\'x\\' [-Wunused-variable]\\n  int main() { int x = 0; std::cout << \"hoge\" << std::endl; }\\n                   ^\\n',\n\t\t  program_message: 'hoge\\n',\n\t\t  program_output: 'hoge\\n',\n\t\t  status: '0' }\n\t*/\n});\n```\n\nTo generate a permanent link to the compiled program, set `save` to `true`.\n\n```javascript\nvar code = 'print(\"I can also run Python.\")';\nrunWandbox.fromString( code, {\n\t'compiler': 'python-3.5.0',\n\t'save': true\n}, function clbk( error, results ) {\n\tvar out = results;\n\t/*\n\t\t{\n\t\t\tpermlink: 'hcx4qh0WIkX2YDps',\n\t\t\tprogram_message: 'I can also run Python.\\n',\n\t\t\tprogram_output: 'I can also run Python.\\n',\n\t\t\tstatus: '0',\n\t\t\turl: 'http://melpon.org/wandbox/permlink/hcx4qh0WIkX2YDps'\n\t\t}\n\t*/\n});\n```\n\n---\n## Examples\n\n``` javascript\nvar runWandbox = require( 'wandbox-api' );\n\n// String:\n\nvar code = '#include <iostream>\\nint main() {\\n\\tstd::cout << \"All is well\" << std::endl;}';\nrunWandbox.fromString( code, clbk );\n\n// File:\n\n// Pass result to callback function...\nrunWandbox( './examples/fixtures/code.cpp', clbk );\n\n// Save output to file...\nrunWandbox( './examples/fixtures/output.json', './examples/fixtures/code.cpp', clbk );\n\nfunction clbk( error, results ) {\n\tif ( error ) {\n\t\tthrow new Error( error.message );\n\t}\n\tconsole.log( results );\n}\n```\n\nTo run the example code from the top-level application directory,\n\n``` bash\n$ DEBUG=* node ./examples/index.js\n```\n\n\n---\n## CLI\n\n### Installation\n\nTo use the module as a general utility, install the module globally\n\n``` bash\n$ npm install -g wandbox-api\n```\n\n\n### Usage\n\n``` bash\nUsage: runWandbox [options] src\n\nOptions:\n\n  -h,  --help                Print this message.\n  -V,  --version             Print the package version.\n       --file                Boolean indicating whether src is a file path or code to be evaluated. Default: false.\n       --compiler            Name of used compiler. Default: gcc-head.\n       --options             Used options for a compiler joined by comma. Default: boost-1.60,warning,gnu++1y.\n       --codes               Additional codes, objects with `file` and `code` keys. Default: [].\n       --save                Boolean indicating whether permanent link should be generated. Default: false.\n       --stdin               Standard input.\n       --compiler-option-raw Additional compile-time options joined by line-break. Default: \"\".\n       --runtime-option-raw  Additional run-time options joined by line-break. Default: \"\".\n  -o,  --output file          Output file path.\n```\n\n\n### Examples\n\nSetting the compiler using the command-line option:\n\n``` bash\n$ DEBUG=* runWandbox --compiler <compiler> <code comes here>\n# => '[{...},{...},...]'\n```\n\nFor local installations, modify the command to point to the local installation directory; e.g.,\n\n``` bash\n$ DEBUG=* ./node_modules/.bin/runWandbox --file --compiler <compiler> <file_path comes here>\n# => '[{...},{...},...]'\n```\n\nOr, if you have cloned this repository and run `npm install`, modify the command to point to the executable; e.g.,\n\n``` bash\n$ DEBUG=* node ./bin/cli --compiler <compiler> <code comes here>\n# => '[{...},{...},...]'\n```\n\n\n---\n## Tests\n\n### Unit\n\nThis repository uses [tape][tape] for unit tests. To run the tests, execute the following command in the top-level application directory:\n\n``` bash\n$ make test\n```\n\nAll new feature development should have corresponding unit tests to validate correct functionality.\n\n\n### Test Coverage\n\nThis repository uses [Istanbul][istanbul] as its code coverage tool. To generate a test coverage report, execute the following command in the top-level application directory:\n\n``` bash\n$ make test-cov\n```\n\nIstanbul creates a `./reports/coverage` directory. To access an HTML version of the report,\n\n``` bash\n$ make view-cov\n```\n\n\n### Browser Support\n\nThis repository uses [Testling][testling] for browser testing. To run the tests in a (headless) local web browser, execute the following command in the top-level application directory:\n\n``` bash\n$ make test-browsers\n```\n\nTo view the tests in a local web browser,\n\n``` bash\n$ make view-browser-tests\n```\n\n<!-- [![browser support][browsers-image]][browsers-url] -->\n\n\n---\n## License\n\n[MIT license](http://opensource.org/licenses/MIT).\n\n\n## Copyright\n\nCopyright &copy; 2016. Philipp Burckhardt.\n\n\n[npm-image]: http://img.shields.io/npm/v/wandbox-api.svg\n[npm-url]: https://npmjs.org/package/wandbox-api\n\n[build-image]: http://img.shields.io/travis/Planeshifter/node-wandbox-api/master.svg\n[build-url]: https://travis-ci.org/Planeshifter/node-wandbox-api\n\n[coverage-image]: https://img.shields.io/codecov/c/github/Planeshifter/node-wandbox-api/master.svg\n[coverage-url]: https://codecov.io/github/Planeshifter/node-wandbox-api?branch=master\n\n[dependencies-image]: http://img.shields.io/david/Planeshifter/node-wandbox-api.svg\n[dependencies-url]: https://david-dm.org/Planeshifter/node-wandbox-api\n\n[dev-dependencies-image]: http://img.shields.io/david/dev/Planeshifter/node-wandbox-api.svg\n[dev-dependencies-url]: https://david-dm.org/dev/Planeshifter/node-wandbox-api\n\n[github-issues-image]: http://img.shields.io/github/issues/Planeshifter/node-wandbox-api.svg\n[github-issues-url]: https://github.com/Planeshifter/node-wandbox-api/issues\n\n[tape]: https://github.com/substack/tape\n[istanbul]: https://github.com/gotwarlost/istanbul\n[testling]: https://ci.testling.com\n\n[wandbox]: http://melpon.org/wandbox/\n[wandbox-api-docs]: https://github.com/melpon/wandbox/blob/master/kennel2/API.rst\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/planeshifter/node-wandbox-api.git"
  },
  "scripts": {
    "coverage": "istanbul cover --dir ./reports/codecov/coverage --report lcovonly tape -- \"./test/*.js\" && cat ./reports/codecov/coverage/lcov.info | codecov && rm -rf ./reports/codecov",
    "test": "tape \"./test/*.js\"",
    "test-cov": "istanbul cover --dir ./reports/coverage --report lcov tape -- \"./test/*.js\""
  },
  "version": "0.0.0"
}
